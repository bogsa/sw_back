// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sw.Datos;

#nullable disable

namespace sw.Datos.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.CentroTrabajo.E_CentroTrabajo", b =>
                {
                    b.Property<int>("IdCentroTrabajo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCentroTrabajo"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Cve_Gerente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("E_EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FolioInicial")
                        .HasColumnType("int");

                    b.Property<string>("LugarExpedicion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MensajePersonal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Responsable")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Serie")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("TipoCentroTrabajo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCentroTrabajo");

                    b.HasIndex("E_EmpresaId");

                    b.ToTable("Admin_CentroTrabajo", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.Coorporativo.E_Coorporativo", b =>
                {
                    b.Property<int>("IdCoorporativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCoorporativo"));

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdCoorporativo");

                    b.ToTable("Admin_Coorporativo", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.Empresa.E_Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmpresa"));

                    b.Property<string>("CP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Calle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colonia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContadorTimbre")
                        .HasColumnType("int");

                    b.Property<string>("CveKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("E_CoorporativoId")
                        .HasColumnType("int");

                    b.Property<int>("E_RegimenFiscalId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoExterior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoInterior")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RFC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaArchivoCER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaArchivoKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaDirectorio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaDirectorioVirtual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutaLogo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmpresa");

                    b.HasIndex("E_CoorporativoId");

                    b.HasIndex("E_RegimenFiscalId");

                    b.ToTable("Admin_Empresa", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.Menus.E_Menu", b =>
                {
                    b.Property<Guid>("IdMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdRol")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMenu");

                    b.ToTable("Admin_Menu", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.Menus.E_SubMenu", b =>
                {
                    b.Property<Guid>("IdSubMenu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newId()");

                    b.Property<string>("Icono")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdSubMenu");

                    b.HasIndex("MenuId");

                    b.ToTable("Admin_SubMenu", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.PerfilesPer.E_Modulo", b =>
                {
                    b.Property<int>("IdModulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdModulo"));

                    b.Property<int>("E_PerfilId")
                        .HasColumnType("int");

                    b.Property<string>("RolId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdModulo");

                    b.HasIndex("E_PerfilId");

                    b.HasIndex("RolId");

                    b.ToTable("Admin_Modulo", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.PerfilesPer.E_Perfil", b =>
                {
                    b.Property<int>("IdPerfil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerfil"));

                    b.Property<string>("NombrePerfil")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdPerfil");

                    b.ToTable("Admin_Perfil", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.PerfilesPer.E_Permiso", b =>
                {
                    b.Property<int>("IdPermiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPermiso"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int>("E_ModuloId")
                        .HasColumnType("int");

                    b.HasKey("IdPermiso");

                    b.HasIndex("ClaimId");

                    b.HasIndex("E_ModuloId");

                    b.ToTable("Admin_Permiso", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.TFDs.E_AsignacionTFD", b =>
                {
                    b.Property<int>("IdAsignacionTFDs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAsignacionTFDs"));

                    b.Property<int>("CantidadTFD")
                        .HasColumnType("int");

                    b.Property<int>("E_EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdAsignacionTFDs");

                    b.HasIndex("E_EmpresaId");

                    b.ToTable("Admin_AsignacionTFD", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.TFDs.E_TFDsDetalle", b =>
                {
                    b.Property<int>("IdDetalleTFD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetalleTFD"));

                    b.Property<int>("CantidadTFD")
                        .HasColumnType("int");

                    b.Property<int>("E_TFDsGlobalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetalleTFD");

                    b.HasIndex("E_TFDsGlobalId");

                    b.ToTable("Admin_TFDsDetalle", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.TFDs.E_TFDsGlobal", b =>
                {
                    b.Property<int>("IdTFDsGlobal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTFDsGlobal"));

                    b.Property<int>("TotalTFD")
                        .HasColumnType("int");

                    b.HasKey("IdTFDsGlobal");

                    b.ToTable("Admin_TFDsGlobal", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.UsuarioCentroTrabajoes.E_UsuarioCentroTrabajoes", b =>
                {
                    b.Property<int>("IdUsuarioCentroTrabajo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuarioCentroTrabajo"));

                    b.Property<int>("E_CentroTrabajoId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdUsuarioCentroTrabajo");

                    b.HasIndex("E_CentroTrabajoId");

                    b.HasIndex("UserId");

                    b.ToTable("Admin_UsuarioCentroTrabajo", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Administracion.UsuarioEmpresas.E_UsuarioEmpresas", b =>
                {
                    b.Property<int>("IdUsuarioEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuarioEmpresa"));

                    b.Property<int>("E_EmpresaId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdUsuarioEmpresa");

                    b.HasIndex("E_EmpresaId");

                    b.HasIndex("UserId");

                    b.ToTable("Admin_UsuarioEmpresas", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Almacen.Inventario.E_Inventario", b =>
                {
                    b.Property<int>("IdInventario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInventario"));

                    b.Property<int>("E_ArticuloId")
                        .HasColumnType("int");

                    b.Property<int>("E_CentroTrabajoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Existencias")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdInventario");

                    b.HasIndex("E_ArticuloId");

                    b.HasIndex("E_CentroTrabajoId");

                    b.ToTable("Alm_Inventario", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Almacen.Inventario.E_InventarioDetallePrecios", b =>
                {
                    b.Property<int>("IdInventarioDetallePrecios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInventarioDetallePrecios"));

                    b.Property<decimal>("Cantidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("E_InventarioId")
                        .HasColumnType("int");

                    b.Property<decimal>("MargenUtilidad")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdInventarioDetallePrecios");

                    b.HasIndex("E_InventarioId");

                    b.ToTable("Alm_InventarioDetallePrecios", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Articulo.E_Articulo", b =>
                {
                    b.Property<int>("IdArticulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArticulo"));

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoBarras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ControlaExistencias")
                        .HasColumnType("bit");

                    b.Property<bool>("Corrida")
                        .HasColumnType("bit");

                    b.Property<string>("CuentaPredial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripcionArticulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("E_CategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("E_ObjetoImpuestoId")
                        .HasColumnType("int");

                    b.Property<int>("E_ProductoServicioId")
                        .HasColumnType("int");

                    b.Property<int>("E_ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("E_UnidadMedidaCId")
                        .HasColumnType("int");

                    b.Property<int>("E_UnidadMedidaVId")
                        .HasColumnType("int");

                    b.Property<decimal>("Factor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("IdentificadorUnico")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Localizacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LotesCaducidades")
                        .HasColumnType("bit");

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreArticulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NumerosSerie")
                        .HasColumnType("bit");

                    b.Property<bool>("Paquete")
                        .HasColumnType("bit");

                    b.Property<decimal>("PrecioCompra")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Receta")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("StatusProduccion")
                        .HasColumnType("bit");

                    b.Property<bool>("StatusServicio")
                        .HasColumnType("bit");

                    b.HasKey("IdArticulo");

                    b.HasIndex("E_CategoriaId");

                    b.HasIndex("E_ObjetoImpuestoId");

                    b.HasIndex("E_ProductoServicioId");

                    b.HasIndex("E_ProveedorId");

                    b.HasIndex("E_UnidadMedidaCId");

                    b.HasIndex("E_UnidadMedidaVId");

                    b.ToTable("Alm_Articulo", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Articulo.E_ArticuloDetalleImpuestos", b =>
                {
                    b.Property<int>("IdArticuloDetalleImpuestos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArticuloDetalleImpuestos"));

                    b.Property<int>("E_ArticuloId")
                        .HasColumnType("int");

                    b.Property<string>("Impuesto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoFactor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoImpuesto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdArticuloDetalleImpuestos");

                    b.HasIndex("E_ArticuloId");

                    b.ToTable("Alm_ArticuloDetalleImpuestos", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Categoria.E_Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<int>("E_DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdCategoria");

                    b.HasIndex("E_DepartamentoId");

                    b.ToTable("Alm_Categoria", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Departamento.E_Departamento", b =>
                {
                    b.Property<int>("IdDepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDepartamento"));

                    b.Property<int>("E_CorporativoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdDepartamento");

                    b.HasIndex("E_CorporativoId");

                    b.ToTable("Alm_Departamento", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Clientes.Cliente.E_Clientes", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"));

                    b.Property<string>("CP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Calle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colonia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Dcto_Individual")
                        .HasColumnType("bit");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<double>("Descuento")
                        .HasColumnType("float");

                    b.Property<int>("E_CoorporativoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Num_Ext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Num_Int")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RFC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelFijo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelMovil")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCliente");

                    b.HasIndex("E_CoorporativoId");

                    b.ToTable("Cli_Clientes", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.Almacen.E_Marca", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMarca"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("E_CorporativoId")
                        .HasColumnType("int");

                    b.HasKey("IdMarca");

                    b.HasIndex("E_CorporativoId");

                    b.ToTable("Cli_Marca", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.Almacen.E_Proveedor", b =>
                {
                    b.Property<int>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProveedor"));

                    b.Property<int>("E_CorporativoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SitioWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProveedor");

                    b.HasIndex("E_CorporativoId");

                    b.ToTable("Cli_Proveedor", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_FormaPago", b =>
                {
                    b.Property<int>("IdFormaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFormaPago"));

                    b.Property<string>("Clave")
                        .HasColumnType("NvarChar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFormaPago");

                    b.ToTable("Conf_FormaPago", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_Impuesto", b =>
                {
                    b.Property<int>("IdImpuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdImpuesto"));

                    b.Property<string>("Clave")
                        .HasColumnType("NvarChar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdImpuesto");

                    b.ToTable("Conf_Impuesto", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_MetodoPago", b =>
                {
                    b.Property<int>("IdMetodoPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMetodoPago"));

                    b.Property<string>("Clave")
                        .HasColumnType("NvarChar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMetodoPago");

                    b.ToTable("Conf_MetodoPago", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_Moneda", b =>
                {
                    b.Property<int>("IdMoneda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMoneda"));

                    b.Property<string>("Clave")
                        .HasColumnType("NvarChar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMoneda");

                    b.ToTable("Conf_Moneda", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_ObjetoImpuesto", b =>
                {
                    b.Property<int>("IdObjetoImpuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdObjetoImpuesto"));

                    b.Property<string>("Clave")
                        .HasColumnType("NvarChar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdObjetoImpuesto");

                    b.ToTable("Conf_ObjetoImpuesto", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_ProductoServicio", b =>
                {
                    b.Property<int>("IdProductoServicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProductoServicio"));

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProductoServicio");

                    b.ToTable("Conf_ProductoServicio", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_Prueba", b =>
                {
                    b.Property<int>("IdPrueba")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrueba"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPrueba");

                    b.ToTable("Conf_Prueba", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_RegimenFiscal", b =>
                {
                    b.Property<int>("IdRegimenFiscal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRegimenFiscal"));

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRegimenFiscal");

                    b.ToTable("Conf_RegimenFiscal", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_TipoComprobante", b =>
                {
                    b.Property<int>("IdTipoComprobante")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoComprobante"));

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTipoComprobante");

                    b.ToTable("Conf_TipoComprobante", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_TipoFactor", b =>
                {
                    b.Property<int>("IdTipoFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoFactor"));

                    b.Property<string>("Clave")
                        .HasColumnType("NvarChar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTipoFactor");

                    b.ToTable("Conf_TipoFactor", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_TipoRelacion", b =>
                {
                    b.Property<int>("IdTipoRelacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoRelacion"));

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTipoRelacion");

                    b.ToTable("Conf_TipoRelacion", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_UnidadMedida", b =>
                {
                    b.Property<int>("IdUnidadMedida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUnidadMedida"));

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nota")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUnidadMedida");

                    b.ToTable("Conf_UnidadMedida", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.CatalogoSAT.E_UsoCFDI", b =>
                {
                    b.Property<int>("IdUsoCFDI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsoCFDI"));

                    b.Property<string>("Clave")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUsoCFDI");

                    b.ToTable("Conf_UsoCFDI", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Identity.ApplicationRol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Prioridad")
                        .HasColumnType("int");

                    b.Property<string>("Tooltip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Aprobado")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("E_CentroTrabajoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Perfil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("E_CentroTrabajoId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("sw.Entidades.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sw.Entidades.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sw.Entidades.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sw.Entidades.Administracion.CentroTrabajo.E_CentroTrabajo", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.Empresa.E_Empresa", "E_Empresa")
                        .WithMany("E_CentroTrabajos")
                        .HasForeignKey("E_EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Empresa");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.Empresa.E_Empresa", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.Coorporativo.E_Coorporativo", "E_Coorporativo")
                        .WithMany("e_Empresas")
                        .HasForeignKey("E_CoorporativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Configuracion.CatalogoSAT.E_RegimenFiscal", "E_RegimenFiscal")
                        .WithMany()
                        .HasForeignKey("E_RegimenFiscalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Coorporativo");

                    b.Navigation("E_RegimenFiscal");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.Menus.E_SubMenu", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.Menus.E_Menu", "Menu")
                        .WithMany("e_SubMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.PerfilesPer.E_Modulo", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.PerfilesPer.E_Perfil", "E_Perfil")
                        .WithMany()
                        .HasForeignKey("E_PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Identity.ApplicationRol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId");

                    b.Navigation("E_Perfil");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.PerfilesPer.E_Permiso", b =>
                {
                    b.HasOne("sw.Entidades.Identity.ApplicationRoleClaim", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Administracion.PerfilesPer.E_Modulo", "E_Modulo")
                        .WithMany()
                        .HasForeignKey("E_ModuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("E_Modulo");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.TFDs.E_AsignacionTFD", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.Empresa.E_Empresa", "E_Empresa")
                        .WithMany()
                        .HasForeignKey("E_EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Empresa");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.TFDs.E_TFDsDetalle", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.TFDs.E_TFDsGlobal", "E_TFDsGlobal")
                        .WithMany("e_TFDsDetalles")
                        .HasForeignKey("E_TFDsGlobalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_TFDsGlobal");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.UsuarioCentroTrabajoes.E_UsuarioCentroTrabajoes", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.CentroTrabajo.E_CentroTrabajo", "E_CentroTrabajo")
                        .WithMany()
                        .HasForeignKey("E_CentroTrabajoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("E_CentroTrabajo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.UsuarioEmpresas.E_UsuarioEmpresas", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.Empresa.E_Empresa", "E_Empresa")
                        .WithMany()
                        .HasForeignKey("E_EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("E_Empresa");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sw.Entidades.Almacen.Inventario.E_Inventario", b =>
                {
                    b.HasOne("sw.Entidades.Articulos.Articulo.E_Articulo", "E_Articulo")
                        .WithMany()
                        .HasForeignKey("E_ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Administracion.CentroTrabajo.E_CentroTrabajo", "E_CentroTrabajo")
                        .WithMany()
                        .HasForeignKey("E_CentroTrabajoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Articulo");

                    b.Navigation("E_CentroTrabajo");
                });

            modelBuilder.Entity("sw.Entidades.Almacen.Inventario.E_InventarioDetallePrecios", b =>
                {
                    b.HasOne("sw.Entidades.Almacen.Inventario.E_Inventario", "E_Inventario")
                        .WithMany("e_InventarioDetallePrecios")
                        .HasForeignKey("E_InventarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Inventario");
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Articulo.E_Articulo", b =>
                {
                    b.HasOne("sw.Entidades.Articulos.Categoria.E_Categoria", "E_Categoria")
                        .WithMany("E_Articulos")
                        .HasForeignKey("E_CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Configuracion.CatalogoSAT.E_ObjetoImpuesto", "E_ObjetoImpuesto")
                        .WithMany()
                        .HasForeignKey("E_ObjetoImpuestoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Configuracion.CatalogoSAT.E_ProductoServicio", "E_ProductoServicio")
                        .WithMany()
                        .HasForeignKey("E_ProductoServicioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Configuracion.Almacen.E_Proveedor", "E_Proveedor")
                        .WithMany()
                        .HasForeignKey("E_ProveedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Configuracion.CatalogoSAT.E_UnidadMedida", "E_UnidadMedidaC")
                        .WithMany()
                        .HasForeignKey("E_UnidadMedidaCId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Configuracion.CatalogoSAT.E_UnidadMedida", "E_UnidadMedidaV")
                        .WithMany()
                        .HasForeignKey("E_UnidadMedidaVId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("E_Categoria");

                    b.Navigation("E_ObjetoImpuesto");

                    b.Navigation("E_ProductoServicio");

                    b.Navigation("E_Proveedor");

                    b.Navigation("E_UnidadMedidaC");

                    b.Navigation("E_UnidadMedidaV");
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Articulo.E_ArticuloDetalleImpuestos", b =>
                {
                    b.HasOne("sw.Entidades.Articulos.Articulo.E_Articulo", "E_Articulo")
                        .WithMany("E_ArticuloDetalleImpuestos")
                        .HasForeignKey("E_ArticuloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Articulo");
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Categoria.E_Categoria", b =>
                {
                    b.HasOne("sw.Entidades.Articulos.Departamento.E_Departamento", "E_Departamento")
                        .WithMany()
                        .HasForeignKey("E_DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Departamento");
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Departamento.E_Departamento", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.Coorporativo.E_Coorporativo", "E_Corporativo")
                        .WithMany()
                        .HasForeignKey("E_CorporativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Corporativo");
                });

            modelBuilder.Entity("sw.Entidades.Clientes.Cliente.E_Clientes", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.Coorporativo.E_Coorporativo", "E_Coorporativo")
                        .WithMany()
                        .HasForeignKey("E_CoorporativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Coorporativo");
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.Almacen.E_Marca", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.Coorporativo.E_Coorporativo", "E_Corporativo")
                        .WithMany()
                        .HasForeignKey("E_CorporativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Corporativo");
                });

            modelBuilder.Entity("sw.Entidades.Configuracion.Almacen.E_Proveedor", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.Coorporativo.E_Coorporativo", "E_Corporativo")
                        .WithMany()
                        .HasForeignKey("E_CorporativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_Corporativo");
                });

            modelBuilder.Entity("sw.Entidades.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("sw.Entidades.Identity.ApplicationRol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sw.Entidades.Identity.ApplicationUser", b =>
                {
                    b.HasOne("sw.Entidades.Administracion.CentroTrabajo.E_CentroTrabajo", "E_CentroTrabajo")
                        .WithMany()
                        .HasForeignKey("E_CentroTrabajoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("E_CentroTrabajo");
                });

            modelBuilder.Entity("sw.Entidades.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("sw.Entidades.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sw.Entidades.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("sw.Entidades.Identity.ApplicationRol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sw.Entidades.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sw.Entidades.Administracion.Coorporativo.E_Coorporativo", b =>
                {
                    b.Navigation("e_Empresas");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.Empresa.E_Empresa", b =>
                {
                    b.Navigation("E_CentroTrabajos");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.Menus.E_Menu", b =>
                {
                    b.Navigation("e_SubMenus");
                });

            modelBuilder.Entity("sw.Entidades.Administracion.TFDs.E_TFDsGlobal", b =>
                {
                    b.Navigation("e_TFDsDetalles");
                });

            modelBuilder.Entity("sw.Entidades.Almacen.Inventario.E_Inventario", b =>
                {
                    b.Navigation("e_InventarioDetallePrecios");
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Articulo.E_Articulo", b =>
                {
                    b.Navigation("E_ArticuloDetalleImpuestos");
                });

            modelBuilder.Entity("sw.Entidades.Articulos.Categoria.E_Categoria", b =>
                {
                    b.Navigation("E_Articulos");
                });
#pragma warning restore 612, 618
        }
    }
}
